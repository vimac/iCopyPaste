<?php

namespace {{=it.daoNamespace}};

use MySpot\SqlMapConst;
use {{=it.baseDAOName}};

/**
 * Generated by iCopyPaste
 */
class {{=it.className}} extends {{=it.shortBaseDAOName}} {

    /**
     * Execute the query '{{=it.fullQueryName}}'
     * {{~it.funcArgs :item:index}}
     * @param {{=item.type}} ${{=item.name}}{{?item.condition}} Determine to enable {{=item.conditionType}} by `{{=item.conditionFieldName}}`{{?}}{{~}}
     * @return {{=it.returnTemplate.commentReturnType}}{{?it.returnTemplate.isArray && it.returnTemplate.commentReturnType !== 'array'}}[]{{?}} {{=it.returnTemplate.comment}}
     * @throws \Exception
     */
    public function {{=it.queryName}}({{~it.funcArgs :item:index}}?{{=item.type}} ${{=item.name}}{{?index < it.funcArgs.length - 1}}, {{?}}{{~}})
    {{{?it.required.length > 0 || it.argsType === 'array'}}
        static $requiredParams = [{{~it.required :item:index}}'{{=item}}'{{?index < it.required.length - 1}}, {{?}}{{~}}];
        {{?it.argsType === 'plain'}}foreach ($requiredParams as $param) {
            if (!isset(${$param})) {
                throw new Exception(sprintf('Param [%s] is missing in %s', $param, __METHOD__));
            }
        }{{?}}{{?}}{{?it.argsType === 'array'}}
        $this->checkQueryArguments($requiredParams, $sqlArguments);
        {{?}}{{?it.argsType === 'do'}}
        $sqlArguments = [
            {{~it.args :item:index}}'{{=item.keyName}}' => [$sourceObject->{{=item.getter}}(), {{=item.pdoType}}]{{?index < it.args.length - 1}},{{?}}
            {{~}}];{{?}}
        $sqlMap = $this->getSqlMap();
        $sqlMapResult = $sqlMap->{{=it.methodName}}('{{=it.fullQueryName}}', {{?it.argsType === 'plain'}}{{?it.args.length > 0}}[{{~it.args :item:index}}
            '{{=item.keyName}}' => [${{=item.name}}, {{=item.pdoType}}]{{?index < it.args.length - 1}}, {{?}}{{~}}
        ]{{??}}[]{{?}}{{?}}{{?it.argsType === 'array' || it.argsType === 'do'}}$sqlArguments{{?}}{{?it.updateArguments && it.updateArguments.length}}, [{{~it.updateArguments :item:index}}
            '{{=item.keyName}}' => [${{=item.name}}, {{=item.pdoType}}]{{?index < it.updateArguments.length - 1}}, {{?}}{{~}}
        ]{{?}}{{?it.queryType === 'update' && it.argsType === 'array' && it.args.length === 0}} ,$updateArguments{{?}});

        {{?it.returnTemplate.returnType === 'sqlMapResult'}}return $sqlMapResult;{{??it.returnTemplate.returnType === 'lines'}}return $sqlMapResult->getAffectedLines();{{??it.returnTemplate.returnType === 'lastInsertId'}}return $sqlMapResult->getLastInsertId();{{??it.returnTemplate.returnType === 'onlyValue'}}return $sqlMapResult->fetchColumn();{{??it.returnTemplate.isArray}}return $sqlMapResult->fetchAll();{{??}}return $sqlMapResult->fetch();{{?}}
    }

}
