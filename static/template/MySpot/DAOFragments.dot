<?php

namespace {{=it.daoNamespace}};

use Exception;
use MySpot\SqlMapConst;
use {{=it.baseDAOName}};

/**
 * Generated by iCopyPaste
 */
class {{=it.className}} extends BaseDAO {

    /**
     * Execute the query '{{=it.fullQueryName}}'
     * {{~it.funcArgs :item:index}}
     * @param {{=item.type}} ${{=item.name}}{{?item.condition}} Determine to enable {{=item.conditionType}} by `{{=item.conditionFieldName}}`{{?}}{{~}}
     * @return {{=it.returnType.type}}{{?it.limit !== 'LIMIT_ONE' && it.type !== 'selectCount'}}[]{{?}} {{=it.returnType.comment}}
     * @throws Exception
     */
    public function {{=it.queryName}}({{~it.funcArgs :item:index}}?{{=item.type}} ${{=item.name}}{{?index < it.funcArgs.length - 1}}, {{?}}{{~}})
    {{{?it.required.length > 0 || it.argsType === 'array'}}
        static $requiredParams = [{{~it.required :item:index}}'{{=item}}'{{?index < it.required.length - 1}}, {{?}}{{~}}];
        {{?it.argsType === 'plain'}}foreach ($requiredParams as $param) {
            if (!isset(${$param})) {
                throw new Exception(sprintf('Param [%s] is missing in %s', $param, __METHOD__));
            }
        }{{?}}{{?}}{{?it.argsType === 'array'}}
        $this->checkQueryArguments($requiredParams, $sqlArguments);
        {{?}}{{?it.argsType === 'do'}}
        $sqlArguments = [
            {{~it.args :item:index}}'{{=item.keyName}}' => [$sourceObject->{{=item.getter}}(), {{=item.pdoType}}]{{?index < it.args.length - 1}},{{?}}
            {{~}}];{{?}}
        $sqlMap = $this->getSqlMap();
        $sqlMapResult = $sqlMap->{{=it.methodName}}('{{=it.fullQueryName}}', {{?it.argsType === 'plain'}}{{?it.args.length > 0}}[{{~it.args :item:index}}
            '{{=item.keyName}}' => [${{=item.name}}, {{=item.pdoType}}]{{?index < it.args.length - 1}}, {{?}}{{~}}
        ]{{??}}[]{{?}}{{?}}{{?it.argsType === 'array' || it.argsType === 'do'}}$sqlArguments{{?}}{{?it.updateArguments && it.updateArguments.length}}, [{{~it.updateArguments :item:index}}
            '{{=item.keyName}}' => [${{=item.name}}, {{=item.pdoType}}]{{?index < it.updateArguments.length - 1}}, {{?}}{{~}}
        ]{{?}}{{?it.type === 'update' && it.argsType === 'array' && it.args.length === 0}} ,$updateArguments{{?}});
        {{?it.type === 'selectCount'}}
        return $sqlMapResult->fetchColumn();
        {{??it.type === 'select'}}{{?it.limitType === 'LIMIT_ONE'}}
        return $sqlMapResult->fetch();{{??}}
        return $sqlMapResult->fetchAll();{{?}}
        {{??it.type === 'insert'}}
        return $sqlMapResult->getLastInsertId();
        {{??it.type === 'update' || it.type === 'delete'}}
        return $sqlMapResult->getAffectedLines();{{?}}
    }

}
