<?php

namespace {{=it.daoNamespace}};

use MySpot\SqlMapConst;
use {{=it.baseDAOName}};

/**
 * Generated by iCopyPaste
 */
class {{=it.className}} extends {{=it.shortBaseDAOName}} {
    {{~it.functions :func:funcIndex}}
    /**
     * Execute the query '{{=func.fullQueryName}}'
     * {{~func.funcArgs :item:index}}
     * @param {{=item.type}} ${{=item.name}}{{?item.condition}} Determine to enable {{=item.conditionType}} by `{{=item.conditionFieldName}}`{{?}}{{~}}
     * @return {{=func.returnTemplate.commentReturnType}}{{?func.returnTemplate.isArray && func.returnTemplate.commentReturnType !== 'array'}}[]{{?}} {{=func.returnTemplate.comment}}
     * @throws \Exception
     */
    public function {{=func.queryName}}({{~func.funcArgs :item:index}}?{{=item.type}} ${{=item.name}}{{?index < func.funcArgs.length - 1}}, {{?}}{{~}})
    {{{?func.required.length > 0 || func.argsType === 'array'}}
        static $requiredParams = [{{~func.required :item:index}}'{{=item}}'{{?index < func.required.length - 1}}, {{?}}{{~}}];
        {{?func.argsType === 'plain'}}foreach ($requiredParams as $param) {
            if (!isset(${$param})) {
                throw new Exception(sprintf('Param [%s] is missing in %s', $param, __METHOD__));
            }
        }{{?}}{{?}}{{?func.argsType === 'array'}}
        $this->checkQueryArguments($requiredParams, $sqlArguments);
        {{?}}{{?func.argsType === 'do'}}
        $sqlArguments = [
            {{~func.args :item:index}}'{{=item.keyName}}' => [$sourceObject->{{=item.getter}}(), {{=item.pdoType}}]{{?index < func.args.length - 1}},{{?}}
            {{~}}];{{?}}
        $sqlMap = $this->getSqlMap();
        $sqlMapResult = $sqlMap->{{=func.methodName}}('{{=func.fullQueryName}}', {{?func.argsType === 'plain'}}{{?func.args.length > 0}}[{{~func.args :item:index}}
            '{{=item.keyName}}' => [${{=item.name}}, {{=item.pdoType}}]{{?index < func.args.length - 1}}, {{?}}{{~}}
        ]{{??}}[]{{?}}{{?}}{{?func.argsType === 'array' || func.argsType === 'do'}}$sqlArguments{{?}}{{?func.updateArguments && func.updateArguments.length}}, [{{~func.updateArguments :item:index}}
            '{{=item.keyName}}' => [${{=item.name}}, {{=item.pdoType}}]{{?index < func.updateArguments.length - 1}}, {{?}}{{~}}
        ]{{?}}{{?func.queryType === 'update' && func.argsType === 'array' && func.args.length === 0}} ,$updateArguments{{?}});

        {{?func.returnTemplate.returnType === 'sqlMapResult'}}return $sqlMapResult;{{??func.returnTemplate.returnType === 'lines'}}return $sqlMapResult->getAffectedLines();{{??func.returnTemplate.returnType === 'lastInsertId'}}return $sqlMapResult->getLastInsertId();{{??func.returnTemplate.returnType === 'onlyValue'}}return $sqlMapResult->fetchColumn();{{??func.returnTemplate.isArray}}return $sqlMapResult->fetchAll();{{??}}return $sqlMapResult->fetch();{{?}}
    }{{~}}
}
